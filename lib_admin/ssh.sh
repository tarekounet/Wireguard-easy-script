#!/bin/bash# Fonctions de gestion SSHnetwork_ssh_config_menu() {    while true; do        clear        echo -e "\e[48;5;236m\e[97m           üåê CONFIGURATION R√âSEAU & SSH          \e[0m"        echo -e "\n\e[1;36mVeuillez choisir une option :\e[0m"        echo "1) Configurer le serveur SSH"        echo "2) Changer le port SSH"        echo "3) Fermer la session SSH actuelle"        echo "4) Activer/D√©sactiver le service SSH"        echo "5) Activer/D√©sactiver l'acc√®s root"        echo "6) Activer/D√©sactiver l'authentification par mot de passe"        echo "7) Configurer les cl√©s SSH"        echo "8) Red√©marrer le service SSH"        echo "9) Retour au menu principal"        read -rp "Entrez votre choix [1-9]: " choix        case $choix in            1) configure_ssh_server ;;            2) configure_ssh_port ;;            3) close_current_ssh_session ;;            4) toggle_ssh_service ;;            5) toggle_root_login ;;            6) toggle_password_auth ;;            7) configure_ssh_keys ;;            8) restart_ssh_service ;;            9) return ;;            *) echo -e "\e[31mChoix invalide. Veuillez r√©essayer.\e[0m" ;;        esac    done}configure_ssh_server() {    clear    echo -e "\e[48;5;236m\e[97m           üîê CONFIGURATION SERVEUR SSH           \e[0m"        # V√©rifier si SSH est install√©    if ! command -v sshd >/dev/null 2>&1; then        echo -e "\n\e[1;31m‚ùå Le serveur SSH n'est pas install√©.\e[0m"        echo -ne "\e[1;33mInstaller le serveur SSH ? [o/N] : \e[0m"        read -r INSTALL_SSH                if [[ "$INSTALL_SSH" =~ ^[oOyY]$ ]]; then            echo -e "\e[1;33müì¶ Installation du serveur SSH...\e[0m"            apt update && apt install -y openssh-server        else            return 0        fi    fi        # Afficher l'√©tat actuel    echo -e "\n\e[48;5;24m\e[97m  üìä √âTAT ACTUEL SSH  \e[0m"    local ssh_status="Inactif"    local ssh_color="\e[1;31m"        if systemctl is-active ssh >/dev/null 2>&1 || systemctl is-active sshd >/dev/null 2>&1; then        ssh_status="Actif"        ssh_color="\e[1;32m"    fi        local ssh_port=$(grep -oP '^Port \K[0-9]+' /etc/ssh/sshd_config 2>/dev/null || echo "22")    local root_login=$(grep -oP '^PermitRootLogin \K\w+' /etc/ssh/sshd_config 2>/dev/null || echo "yes")    local password_auth=$(grep -oP '^PasswordAuthentication \K\w+' /etc/ssh/sshd_config 2>/dev/null || echo "yes")        echo -e "\n    \e[90müîê Statut :\e[0m $ssh_color$ssh_status\e[0m"    echo -e "    \e[90müîó Port :\e[0m \e[1;36m$ssh_port\e[0m"    echo -e "    \e[90müë§ Connexion root :\e[0m \e[1;36m$root_login\e[0m"    echo -e "    \e[90müîë Auth par mot de passe :\e[0m \e[1;36m$password_auth\e[0m"        echo -e "\n\e[48;5;24m\e[97m  ‚öôÔ∏è  OPTIONS DE CONFIGURATION  \e[0m"    echo -e "\e[90m‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\e[0m"    echo -e "\e[90m‚îÇ\e[0m \e[1;36m 1\e[0m  \e[90m‚îÇ\e[0m \e[97mActiver/D√©sactiver connexion root\e[0m           \e[90m‚îÇ\e[0m"    echo -e "\e[90m‚îÇ\e[0m \e[1;36m 2\e[0m  \e[90m‚îÇ\e[0m \e[97mActiver/D√©sactiver auth par mot de passe\e[0m    \e[90m‚îÇ\e[0m"    echo -e "\e[90m‚îÇ\e[0m \e[1;36m 3\e[0m  \e[90m‚îÇ\e[0m \e[97mConfigurer les cl√©s SSH\e[0m                    \e[90m‚îÇ\e[0m"    echo -e "\e[90m‚îÇ\e[0m \e[1;36m 4\e[0m  \e[90m‚îÇ\e[0m \e[97mRed√©marrer le service SSH\e[0m                  \e[90m‚îÇ\e[0m"    echo -e "\e[90m‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\e[0m"        echo -ne "\n\e[1;33mChoisissez une option [1-4] ou 0 pour annuler : \e[0m"    read -r SSH_CHOICE        case $SSH_CHOICE in        1) toggle_root_login ;;        2) toggle_password_auth ;;        3) configure_ssh_keys ;;        4) restart_ssh_service ;;        0) return 0 ;;        *) echo -e "\e[1;31m‚úó Choix invalide\e[0m" ;;    esac}configure_ssh_port() {    clear    echo -e "\e[48;5;236m\e[97m           üîó CONFIGURATION PORT SSH              \e[0m"        local current_port=$(grep -oP '^Port \K[0-9]+' /etc/ssh/sshd_config 2>/dev/null || echo "22")        echo -e "\n\e[48;5;24m\e[97m  üìä √âTAT ACTUEL  \e[0m"    echo -e "\n    \e[90müîó Port SSH actuel :\e[0m \e[1;36m$current_port\e[0m"        echo -e "\n\e[1;33mNouveau port SSH (1-65535) :\e[0m"    echo -ne "\e[1;36m‚Üí \e[0m"    read -r NEW_PORT        if ! validate_input "port" "$NEW_PORT"; then        echo -e "\e[1;31m‚úó Port invalide\e[0m"        return 1    fi        if [[ "$NEW_PORT" == "$current_port" ]]; then        echo -e "\e[1;33m‚ö†Ô∏è  Le port est d√©j√† configur√© sur $NEW_PORT\e[0m"        return 0    fi        echo -e "\n\e[1;31mATTENTION :\e[0m Changer le port SSH peut couper votre connexion actuelle."    echo -e "Assurez-vous de pouvoir acc√©der au serveur par un autre moyen."    echo -ne "\e[1;33mConfirmer le changement de port vers $NEW_PORT ? [o/N] : \e[0m"    read -r CONFIRM        if [[ "$CONFIRM" =~ ^[oOyY]$ ]]; then        # Backup de la configuration        cp /etc/ssh/sshd_config "/etc/ssh/sshd_config.backup-$(date +%Y%m%d-%H%M%S)"                # Modifier le port        if grep -q "^Port " /etc/ssh/sshd_config; then            sed -i "s/^Port .*/Port $NEW_PORT/" /etc/ssh/sshd_config        else            echo "Port $NEW_PORT" >> /etc/ssh/sshd_config        fi                # Tester la configuration        if sshd -t; then            echo -e "\e[1;32m‚úì Configuration SSH valide\e[0m"                        # Red√©marrer SSH            if systemctl restart ssh 2>/dev/null || systemctl restart sshd 2>/dev/null; then                echo -e "\e[1;32m‚úì Service SSH red√©marr√© sur le port $NEW_PORT\e[0m"            else                echo -e "\e[1;31m‚úó Erreur lors du red√©marrage SSH\e[0m"            fi        else            echo -e "\e[1;31m‚úó Configuration SSH invalide, restauration...\e[0m"            cp "/etc/ssh/sshd_config.backup-$(date +%Y%m%d-%H%M%S)" /etc/ssh/sshd_config        fi    else        echo -e "\e[1;33mChangement annul√©.\e[0m"    fi}close_current_ssh_session() {    clear    echo -e "\e[48;5;236m\e[97m           üö™ FERMETURE SESSION SSH               \e[0m"        # V√©rifier si on est bien connect√© via SSH    if [[ -z "${SSH_CLIENT:-}" && -z "${SSH_TTY:-}" && -z "${SSH_CONNECTION:-}" ]]; then        echo -e "\n\e[1;33m‚ö†Ô∏è  Vous n'√™tes pas connect√© via SSH.\e[0m"        echo -e "\e[1;36mCette option n'est disponible que pour les sessions SSH.\e[0m"        return 0    fi        # Afficher les informations de la session    echo -e "\n\e[48;5;24m\e[97m  üìä INFORMATIONS SESSION  \e[0m"    echo -e "\n    \e[90müîó Connexion SSH depuis :\e[0m \e[1;36m${SSH_CLIENT%% *}\e[0m"    echo -e "    \e[90müñ•Ô∏è  Terminal :\e[0m \e[1;36m${SSH_TTY:-$TERM}\e[0m"    echo -e "    \e[90müë§ Utilisateur :\e[0m \e[1;36m$USER\e[0m"    echo -e "    \e[90müîí PID de session :\e[0m \e[1;36m$$\e[0m"        # Lister les autres sessions SSH actives    local other_sessions=$(who | grep -v "^$USER.*$(tty | sed 's|/dev/||')" | wc -l)    if [[ $other_sessions -gt 0 ]]; then        echo -e "\n\e[1;32m‚úÖ D'autres sessions SSH sont actives ($other_sessions sessions)\e[0m"        echo -e "\e[1;36müí° Le service SSH restera actif pour les autres utilisateurs\e[0m"    else        echo -e "\n\e[1;33m‚ö†Ô∏è  Vous √™tes la seule session SSH active\e[0m"        echo -e "\e[1;36müí° Le service SSH restera quand m√™me actif\e[0m"    fi        echo -e "\n\e[1;33m‚ùì Voulez-vous fermer cette session SSH ? [o/N] : \e[0m"    read -r CONFIRM_LOGOUT        if [[ "$CONFIRM_LOGOUT" =~ ^[oOyY]$ ]]; then        echo -e "\n\e[1;36müëã Fermeture de la session en cours...\e[0m"        echo -e "\e[1;32m‚úÖ Le service SSH reste actif pour les reconnexions\e[0m"        sleep 2        # Fermer seulement cette session SSH        kill -HUP $$    else        echo -e "\n\e[1;32m‚úÖ Session conserv√©e\e[0m"    fi}toggle_ssh_service() {    clear    echo -e "\e[48;5;236m\e[97m           üîê GESTION SERVICE SSH                 \e[0m"        local ssh_status="Inactif"    local ssh_color="\e[1;31m"    local ssh_service="ssh"        # D√©tecter le nom du service SSH    if systemctl is-active sshd >/dev/null 2>&1; then        ssh_service="sshd"        ssh_status="Actif"        ssh_color="\e[1;32m"    elif systemctl is-active ssh >/dev/null 2>&1; then        ssh_service="ssh"        ssh_status="Actif"        ssh_color="\e[1;32m"    fi        echo -e "\n\e[48;5;24m\e[97m  üìä √âTAT ACTUEL  \e[0m"    echo -e "\n    \e[90müîê Service SSH :\e[0m $ssh_color$ssh_status\e[0m"    echo -e "    \e[90m‚öôÔ∏è  Service :\e[0m \e[1;36m$ssh_service\e[0m"        if [[ "$ssh_status" == "Actif" ]]; then        # V√©rifier si on est connect√© via SSH        if [[ -n "${SSH_CLIENT:-}" || -n "${SSH_TTY:-}" || -n "${SSH_CONNECTION:-}" ]]; then            echo -e "\n\e[1;31müö® DANGER - SESSION SSH D√âTECT√âE üö®\e[0m"            echo -e "\e[1;33m‚ö†Ô∏è  Vous √™tes connect√© via SSH depuis : ${SSH_CLIENT%% *}\e[0m"            echo -e "\e[1;31m‚ùå D√©sactiver SSH vous d√©connectera IMM√âDIATEMENT !\e[0m"            echo -e "\n\e[1;36müí° Solutions alternatives :\e[0m"            echo -e "   1. Configurer une connexion console/VNC d'abord"            echo -e "   2. Modifier seulement la configuration SSH"            echo -e "   3. Programmer un red√©marrage automatique de SSH"            echo -e "\n\e[1;33m√ätes-vous ABSOLUMENT S√õR de vouloir d√©sactiver SSH ? (tapez 'CONFIRME' en majuscules) : \e[0m"            read -r CONFIRM_DANGEROUS                        if [[ "$CONFIRM_DANGEROUS" != "CONFIRME" ]]; then                echo -e "\e[1;32m‚úÖ Op√©ration annul√©e - SSH conserv√© actif\e[0m"                echo -e "\e[1;36müí° Conseil : Configurez d'abord un acc√®s alternatif (console, VNC, etc.)\e[0m"                echo -e "\e[1;33mAppuyez sur une touche pour continuer...\e[0m"                return 0            else                echo -e "\n\e[1;31m‚ö†Ô∏è  DERNI√àRE CHANCE : Cette action va vous d√©connecter MAINTENANT !\e[0m"                echo -e "\e[1;33mTapez 'DECONNEXION' pour confirmer la d√©sactivation : \e[0m"                read -r FINAL_CONFIRM                                if [[ "$FINAL_CONFIRM" != "DECONNEXION" ]]; then                    echo -e "\e[1;32m‚úÖ Op√©ration annul√©e - SSH conserv√© actif\e[0m"                    echo -e "\e[1;33mAppuyez sur une touche pour continuer...\e[0m"                    return 0                fi            fi        else            echo -e "\n\e[1;31mATTENTION :\e[0m D√©sactiver SSH coupera toutes les connexions SSH actuelles."            echo -ne "\e[1;33mD√©sactiver le service SSH ? [o/N] : \e[0m"            read -r CONFIRM                        if [[ ! "$CONFIRM" =~ ^[oOyY]$ ]]; then                return 0            fi        fi                echo -e "\n\e[1;31m‚è≥ D√©sactivation SSH dans 5 secondes...\e[0m"        echo -e "\e[1;33m   Appuyez sur Ctrl+C pour annuler !\e[0m"        sleep 5                systemctl stop "$ssh_service"        systemctl disable "$ssh_service"        echo -e "\e[1;32m‚úì Service SSH d√©sactiv√©\e[0m"    else        echo -ne "\n\e[1;33mActiver le service SSH ? [o/N] : \e[0m"        read -r CONFIRM                if [[ "$CONFIRM" =~ ^[oOyY]$ ]]; then            systemctl enable "$ssh_service"            systemctl start "$ssh_service"            echo -e "\e[1;32m‚úì Service SSH activ√©\e[0m"        fi    fi}# Toggle root logintoggle_root_login() {    local current_setting=$(grep -oP '^PermitRootLogin \K\w+' /etc/ssh/sshd_config 2>/dev/null || echo "yes")        echo -e "\n\e[1;33müìä Configuration actuelle :\e[0m PermitRootLogin $current_setting"        if [[ "$current_setting" == "yes" ]]; then        echo -ne "\e[1;33mD√©sactiver la connexion root via SSH ? [o/N] : \e[0m"        read -r CONFIRM        if [[ "$CONFIRM" =~ ^[oOyY]$ ]]; then            sed -i 's/^PermitRootLogin.*/PermitRootLogin no/' /etc/ssh/sshd_config            echo -e "\e[1;32m‚úì Connexion root d√©sactiv√©e\e[0m"        fi    else        echo -ne "\e[1;33mActiver la connexion root via SSH ? [o/N] : \e[0m"        read -r CONFIRM        if [[ "$CONFIRM" =~ ^[oOyY]$ ]]; then            sed -i 's/^PermitRootLogin.*/PermitRootLogin yes/' /etc/ssh/sshd_config            echo -e "\e[1;32m‚úì Connexion root activ√©e\e[0m"        fi    fi        restart_ssh_service}# Toggle password authenticationtoggle_password_auth() {    local current_setting=$(grep -oP '^PasswordAuthentication \K\w+' /etc/ssh/sshd_config 2>/dev/null || echo "yes")        echo -e "\n\e[1;33müìä Configuration actuelle :\e[0m PasswordAuthentication $current_setting"        if [[ "$current_setting" == "yes" ]]; then        echo -e "\e[1;31mATTENTION :\e[0m D√©sactiver l'authentification par mot de passe n√©cessite des cl√©s SSH configur√©es."        echo -ne "\e[1;33mD√©sactiver l'authentification par mot de passe ? [o/N] : \e[0m"        read -r CONFIRM        if [[ "$CONFIRM" =~ ^[oOyY]$ ]]; then            sed -i 's/^PasswordAuthentication.*/PasswordAuthentication no/' /etc/ssh/sshd_config            echo -e "\e[1;32m‚úì Authentification par mot de passe d√©sactiv√©e\e[0m"        fi    else        echo -ne "\e[1;33mActiver l'authentification par mot de passe ? [o/N] : \e[0m"        read -r CONFIRM        if [[ "$CONFIRM" =~ ^[oOyY]$ ]]; then            sed -i 's/^PasswordAuthentication.*/PasswordAuthentication yes/' /etc/ssh/sshd_config            echo -e "\e[1;32m‚úì Authentification par mot de passe activ√©e\e[0m"        fi    fi        restart_ssh_service}# Configure SSH keysconfigure_ssh_keys() {    echo -e "\n\e[1;33müîë Configuration des cl√©s SSH\e[0m"    echo -e "Cette fonctionnalit√© permettra de g√©rer les cl√©s SSH autoris√©es."    echo -e "\e[1;33mFonctionnalit√© en cours de d√©veloppement...\e[0m"        # TODO: Impl√©menter la gestion des cl√©s SSH    # - Afficher les cl√©s autoris√©es    # - Ajouter une nouvelle cl√©    # - Supprimer une cl√©    # - G√©n√©rer une nouvelle paire de cl√©s}# Restart SSH servicerestart_ssh_service() {    echo -e "\n\e[1;33müîÑ Red√©marrage du service SSH...\e[0m"        if systemctl restart ssh 2>/dev/null; then        echo -e "\e[1;32m‚úì Service SSH red√©marr√© (ssh)\e[0m"    elif systemctl restart sshd 2>/dev/null; then        echo -e "\e[1;32m‚úì Service SSH red√©marr√© (sshd)\e[0m"    else        echo -e "\e[1;31m‚úó Erreur lors du red√©marrage SSH\e[0m"    fi}
